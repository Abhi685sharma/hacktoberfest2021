#include <iostream>
#include <vector>
#include <queue>
using namespace std;
template <typename T>

class TreeNode
{
public:
    T data;
    vector<TreeNode<T> *> children;
    TreeNode(T d)
    {
        data = d;
    }
};
TreeNode<int> *takeInput()
{
    int data;
    cout << "Enter root data : " << endl;
    cin >> data;
    TreeNode<int> *root = new TreeNode<int>(data);
    int n;
    cout << "Enter the children of " << data << " : " << endl;
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        TreeNode<int> *child = takeInput();
        root->children.push_back(child);
    }
    return root;
}

TreeNode<int> *takeInputLevelWise()
{
    int rootdata;
    cout << "Enter root data " << endl;
    cin >> rootdata;
    TreeNode<int> *root = new TreeNode<int>(rootdata);
    queue<TreeNode<int> *> pendingQueue;
    pendingQueue.push(root);

    while (pendingQueue.size() != 0)
    {
        TreeNode<int> *front = pendingQueue.front();
        pendingQueue.pop();
        int n;
        cout << "Enter the no. of children of " << front->data << endl;
        cin >> n;
        for (int i = 0; i < n; i++)
        {
            int childData;
            cout << "Enter the " << i + 1 << " th child of " << front->data << endl;
            cin >> childData;
            TreeNode<int> *child = new TreeNode<int>(childData);
            front->children.push_back(child);
            pendingQueue.push(child);
        }
    }
    return root;
}

void print_serially(TreeNode<int> *root)
{
    if (root == NULL)
        return;
    queue<TreeNode<int> *> pendingNodes;
    pendingNodes.push(root);
    while (pendingNodes.size() != 0)
    {
        TreeNode<int> *front = pendingNodes.front();
        cout << front->data << " : ";
        for (int i = 0; i < front->children.size(); i++)
        {
            cout << front->children[i]->data << ",";
            pendingNodes.push(front->children[i]);
        }
        pendingNodes.pop();
        cout << endl;
    }
}

int numNodes(TreeNode<int> *root)
{
    int ans = 1;
    for (int i = 0; i < root->children.size(); i++)
    {
        ans += numNodes(root->children[i]);
    }
    return ans;
}
int sum_of_node(TreeNode<int> *root)
{
    static int sum = 0;
    sum += root->data;
    for (int i = 0; i < root->children.size(); i++)
    {
        sum_of_node(root->children[i]);
    }
    return sum;
}

void print(TreeNode<int> *root)
{
    cout << root->data << " : ";
    for (int i = 0; i < root->children.size(); i++)
        cout << root->children[i]->data << " , ";
    cout << endl;
    for (int i = 0; i < root->children.size(); i++)
        print(root->children[i]);
}

int largest_data(TreeNode<int> *root)
{
    int max = 0;
    if (root->data > max)
        max = root->data;
    for (int i = 0; i < root->children.size(); i++)
        largest_data(root->children[i]);
    return max;
}
int main()
{
    // TreeNode<int> * root = new TreeNode<int>(19);
    // TreeNode<int> * node1 = new TreeNode<int>(20);
    // TreeNode<int> * node2 = new TreeNode<int>(30);
    // root->children.push_back(node1);
    // root->children.push_back(node2);
    //TreeNode<int> *root = takeInput();
    TreeNode<int> *root = takeInputLevelWise();
    //print(root);
   // print_serially(root);
    cout << sum_of_node(root) << endl;
   // cout<<largest_data(root)<<endl;
    return 0;
}
